name: Android Worker

on:
  push:
    tags: [ 'v*' ]
    branches: [ '*' ]
  pull_request: 
    branches: [ '*' ]

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: unit tests
        working-directory: ./android
        run: ./gradlew testDebugUnitTest

      - name: verify test results
        uses: asadmansr/android-test-report-action@v1.2.0
        if: ${{ always() }}

  detekt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: run detekt + ktlint
        working-directory: ./android
        run: ./gradlew detekt

  ui_tests:
    runs-on: macos-latest
    strategy:
      matrix:
        sdk: [ 29 ]
        profile: [ pixel_xl, pixel_2 ]
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: android-${{ matrix.sdk }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.sdk }}
          force-avd-creation: true
          profile: ${{ matrix.profile }}
          emulator-options: -no-window -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: ui tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.sdk }}
          force-avd-creation: false
          profile: ${{ matrix.profile }}
          emulator-options: -no-snapshot-save -no-window -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: cd ./android && ./gradlew connectedCheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: prepare keystore
        working-directory: ./android
        env:
          ENCODED_STRING: ${{ secrets.APPLE_CLASSIFIER_KEYSTORE }}
        run: |
          mkdir ./secrets/
          echo $ENCODED_STRING | base64 -di > ./secrets/release.jks

      - name: building
        working-directory: ./android
        run: ./gradlew assembleRelease
        env:
          VERSION_NAME: ${{ github.ref }}
          APPLE_CLASSIFIER_KEY: ${{ secrets.APPLE_CLASSIFIER_KEY }}
          APPLE_CLASSIFIER_PASSWORD: ${{ secrets.APPLE_CLASSIFIER_PASSWORD }}

      - name: upload apk
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: app/build/outputs/apk/release/

  publish:
    runs-on: ubuntu-latest
    needs: [unit_tests, detekt, ui_tests, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - name: fetch uploaded apk
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: upload apk
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android/app-release.apk
          asset_name: release.apk
          asset_content_type: application/zip
